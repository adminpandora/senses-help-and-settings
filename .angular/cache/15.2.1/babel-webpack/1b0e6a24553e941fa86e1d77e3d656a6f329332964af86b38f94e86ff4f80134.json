{"ast":null,"code":"import { combineLatest, map, of } from 'rxjs';\nimport data from '../static/rbo.static-file.json';\nimport * as i0 from \"@angular/core\";\nexport class DataService {\n  constructor() {}\n  getData(type) {\n    return combineLatest([this.getStaticData(type), this.getTridionData(type)]).pipe(map(([staticData, tridionData]) => {\n      return [...staticData, ...tridionData];\n    }));\n  }\n  getStaticData(type) {\n    const dataSource = data;\n    return of(dataSource);\n  }\n  getTridionData(type) {\n    const dataSource = data;\n    return of(dataSource);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)();\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAASA,aAAa,EAAEC,GAAG,EAAcC,EAAE,QAAQ,MAAM;AAEzD,OAAOC,IAAI,MAAM,gCAAgC;;AAGjD,OAAM,MAAOC,WAAW;EACtBC,eAAe;EAEfC,OAAO,CAACC,IAAY;IAClB,OAAOP,aAAa,CAAC,CAAC,IAAI,CAACQ,aAAa,CAACD,IAAI,CAAC,EAAE,IAAI,CAACE,cAAc,CAACF,IAAI,CAAC,CAAC,CAAC,CAACG,IAAI,CAC9ET,GAAG,CAAC,CAAC,CAACU,UAAU,EAAEC,WAAW,CAAC,KAAI;MAChC,OAAO,CAAC,GAAGD,UAAU,EAAE,GAAGC,WAAW,CAAC;IACxC,CAAC,CAAC,CACH;EACH;EAEAJ,aAAa,CAACD,IAAY;IACxB,MAAMM,UAAU,GAAGV,IAAmB;IACtC,OAAOD,EAAE,CAACW,UAAU,CAAC;EACvB;EAEAJ,cAAc,CAACF,IAAY;IACzB,MAAMM,UAAU,GAAGV,IAAmB;IACtC,OAAOD,EAAE,CAACW,UAAU,CAAC;EACvB;;AAnBWT,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAU,SAAXV,WAAW;AAAA","names":["combineLatest","map","of","data","DataService","constructor","getData","type","getStaticData","getTridionData","pipe","staticData","tridionData","dataSource","factory"],"sourceRoot":"","sources":["/Users/hugocunha/rabobank/help-and-settings/senses-help-and-settings/src/app/services/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { combineLatest, map, Observable, of } from 'rxjs';\nimport { IMenuItem } from '../libs/models/menu-item';\nimport data from '../static/rbo.static-file.json';\n\n@Injectable()\nexport class DataService {\n  constructor() {}\n\n  getData(type: string) {\n    return combineLatest([this.getStaticData(type), this.getTridionData(type)]).pipe(\n      map(([staticData, tridionData]) => {\n        return [...staticData, ...tridionData];\n      })\n    );\n  }\n\n  getStaticData(type: string): Observable<IMenuItem[]> {\n    const dataSource = data as IMenuItem[];\n    return of(dataSource);\n  }\n\n  getTridionData(type: string): Observable<IMenuItem[]> {\n    const dataSource = data as IMenuItem[];\n    return of(dataSource);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}